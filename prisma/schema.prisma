// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum userRole {
  ADMIN
  MEMBER
}

enum difficultyLevel {
  EASY
  MEDIUM
  HARD
}

model User {
  id                      String           @id @default(uuid())
  name                    String
  email                   String           @unique
  password                String
  image                   String?
  role                    userRole         @default(MEMBER)
  verificationToken       String?          @unique
  verificationTokenExpiry DateTime?
  isVerified              Boolean          @default(false)
  forgotPasswordToken     String?          @unique
  forgotPasswordExpiry    DateTime?
  refreshToken            String?          @unique
  createdAt               DateTime         @default(now())
  updatedAt               DateTime         @updatedAt
  problems                Problem[]
  submissions             Submission[]
  solvedProblems          SolvedProblems[]
}

model Problem {
  id                 String           @id @default(uuid())
  title              String
  description        String
  difficult          difficultyLevel
  constraints        String
  examples           Json
  hints              String?
  editorial          String?
  tags               String[]
  userId             String
  testcases          Json
  codeSnippets       Json
  referenceSolutions Json
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  user               User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  submission         Submission[]
  solvedBy     SolvedProblems[]
}

model Submission {
  id           String             @id @default(uuid())
  problemId    String
  userId       String
  sourceCode   Json
  stderr       String?
  stdout       String?
  stdin        String?
  status       String
  time         String?
  memory       String?
  compileOuput String?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  user         User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem      Problem            @relation(fields: [problemId], references: [id], onDelete: Cascade)
  testcases    TestCasesResults[]
  
}

model TestCasesResults {
  id             String  @id @default(uuid())
  submissionId   String
  stderr         String?
  testCase       Int
  status         String
  passed         Boolean
  expectedOutput String
  actualOutput   String?
  time           String?
  memory         String?

  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@index([submissionId])
}

model SolvedProblems {
  id        String @id @default(uuid())
  userId    String
  problemId String

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([problemId, userId])
}
